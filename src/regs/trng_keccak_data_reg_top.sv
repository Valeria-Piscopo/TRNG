// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module trng_keccak_data_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 9
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output trng_keccak_data_reg_pkg::trng_keccak_data_reg2hw_t reg2hw, // Write
  input  trng_keccak_data_reg_pkg::trng_keccak_data_hw2reg_t hw2reg, // Read


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import trng_keccak_data_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [31:0] keccak_din_0_wd;
  logic keccak_din_0_we;
  logic [31:0] keccak_din_1_wd;
  logic keccak_din_1_we;
  logic [31:0] keccak_din_2_wd;
  logic keccak_din_2_we;
  logic [31:0] keccak_din_3_wd;
  logic keccak_din_3_we;
  logic [31:0] keccak_din_4_wd;
  logic keccak_din_4_we;
  logic [31:0] keccak_din_5_wd;
  logic keccak_din_5_we;
  logic [31:0] keccak_din_6_wd;
  logic keccak_din_6_we;
  logic [31:0] keccak_din_7_wd;
  logic keccak_din_7_we;
  logic [31:0] keccak_din_8_wd;
  logic keccak_din_8_we;
  logic [31:0] keccak_din_9_wd;
  logic keccak_din_9_we;
  logic [31:0] keccak_din_10_wd;
  logic keccak_din_10_we;
  logic [31:0] keccak_din_11_wd;
  logic keccak_din_11_we;
  logic [31:0] keccak_din_12_wd;
  logic keccak_din_12_we;
  logic [31:0] keccak_din_13_wd;
  logic keccak_din_13_we;
  logic [31:0] keccak_din_14_wd;
  logic keccak_din_14_we;
  logic [31:0] keccak_din_15_wd;
  logic keccak_din_15_we;
  logic [31:0] keccak_din_16_wd;
  logic keccak_din_16_we;
  logic [31:0] keccak_din_17_wd;
  logic keccak_din_17_we;
  logic [31:0] keccak_din_18_wd;
  logic keccak_din_18_we;
  logic [31:0] keccak_din_19_wd;
  logic keccak_din_19_we;
  logic [31:0] keccak_din_20_wd;
  logic keccak_din_20_we;
  logic [31:0] keccak_din_21_wd;
  logic keccak_din_21_we;
  logic [31:0] keccak_din_22_wd;
  logic keccak_din_22_we;
  logic [31:0] keccak_din_23_wd;
  logic keccak_din_23_we;
  logic [31:0] keccak_din_24_wd;
  logic keccak_din_24_we;
  logic [31:0] keccak_din_25_wd;
  logic keccak_din_25_we;
  logic [31:0] keccak_din_26_wd;
  logic keccak_din_26_we;
  logic [31:0] keccak_din_27_wd;
  logic keccak_din_27_we;
  logic [31:0] keccak_din_28_wd;
  logic keccak_din_28_we;
  logic [31:0] keccak_din_29_wd;
  logic keccak_din_29_we;
  logic [31:0] keccak_din_30_wd;
  logic keccak_din_30_we;
  logic [31:0] keccak_din_31_wd;
  logic keccak_din_31_we;
  logic [31:0] keccak_din_32_wd;
  logic keccak_din_32_we;
  logic [31:0] keccak_din_33_wd;
  logic keccak_din_33_we;
  logic [31:0] keccak_din_34_wd;
  logic keccak_din_34_we;
  logic [31:0] keccak_din_35_wd;
  logic keccak_din_35_we;
  logic [31:0] keccak_din_36_wd;
  logic keccak_din_36_we;
  logic [31:0] keccak_din_37_wd;
  logic keccak_din_37_we;
  logic [31:0] keccak_din_38_wd;
  logic keccak_din_38_we;
  logic [31:0] keccak_din_39_wd;
  logic keccak_din_39_we;
  logic [31:0] keccak_din_40_wd;
  logic keccak_din_40_we;
  logic [31:0] keccak_din_41_wd;
  logic keccak_din_41_we;
  logic [31:0] keccak_din_42_wd;
  logic keccak_din_42_we;
  logic [31:0] keccak_din_43_wd;
  logic keccak_din_43_we;
  logic [31:0] keccak_din_44_wd;
  logic keccak_din_44_we;
  logic [31:0] keccak_din_45_wd;
  logic keccak_din_45_we;
  logic [31:0] keccak_din_46_wd;
  logic keccak_din_46_we;
  logic [31:0] keccak_din_47_wd;
  logic keccak_din_47_we;
  logic [31:0] keccak_din_48_wd;
  logic keccak_din_48_we;
  logic [31:0] keccak_din_49_wd;
  logic keccak_din_49_we;
  logic [31:0] keccak_dout_0_qs;
  logic keccak_dout_0_re;
  logic [31:0] keccak_dout_1_qs;
  logic keccak_dout_1_re;
  logic [31:0] keccak_dout_2_qs;
  logic keccak_dout_2_re;
  logic [31:0] keccak_dout_3_qs;
  logic keccak_dout_3_re;
  logic [31:0] keccak_dout_4_qs;
  logic keccak_dout_4_re;
  logic [31:0] keccak_dout_5_qs;
  logic keccak_dout_5_re;
  logic [31:0] keccak_dout_6_qs;
  logic keccak_dout_6_re;
  logic [31:0] keccak_dout_7_qs;
  logic keccak_dout_7_re;
  logic [31:0] keccak_dout_8_qs;
  logic keccak_dout_8_re;
  logic [31:0] keccak_dout_9_qs;
  logic keccak_dout_9_re;
  logic [31:0] keccak_dout_10_qs;
  logic keccak_dout_10_re;
  logic [31:0] keccak_dout_11_qs;
  logic keccak_dout_11_re;
  logic [31:0] keccak_dout_12_qs;
  logic keccak_dout_12_re;
  logic [31:0] keccak_dout_13_qs;
  logic keccak_dout_13_re;
  logic [31:0] keccak_dout_14_qs;
  logic keccak_dout_14_re;
  logic [31:0] keccak_dout_15_qs;
  logic keccak_dout_15_re;
  logic [31:0] keccak_dout_16_qs;
  logic keccak_dout_16_re;
  logic [31:0] keccak_dout_17_qs;
  logic keccak_dout_17_re;
  logic [31:0] keccak_dout_18_qs;
  logic keccak_dout_18_re;
  logic [31:0] keccak_dout_19_qs;
  logic keccak_dout_19_re;
  logic [31:0] keccak_dout_20_qs;
  logic keccak_dout_20_re;
  logic [31:0] keccak_dout_21_qs;
  logic keccak_dout_21_re;
  logic [31:0] keccak_dout_22_qs;
  logic keccak_dout_22_re;
  logic [31:0] keccak_dout_23_qs;
  logic keccak_dout_23_re;
  logic [31:0] keccak_dout_24_qs;
  logic keccak_dout_24_re;
  logic [31:0] keccak_dout_25_qs;
  logic keccak_dout_25_re;
  logic [31:0] keccak_dout_26_qs;
  logic keccak_dout_26_re;
  logic [31:0] keccak_dout_27_qs;
  logic keccak_dout_27_re;
  logic [31:0] keccak_dout_28_qs;
  logic keccak_dout_28_re;
  logic [31:0] keccak_dout_29_qs;
  logic keccak_dout_29_re;
  logic [31:0] keccak_dout_30_qs;
  logic keccak_dout_30_re;
  logic [31:0] keccak_dout_31_qs;
  logic keccak_dout_31_re;
  logic [31:0] keccak_dout_32_qs;
  logic keccak_dout_32_re;
  logic [31:0] keccak_dout_33_qs;
  logic keccak_dout_33_re;
  logic [31:0] keccak_dout_34_qs;
  logic keccak_dout_34_re;
  logic [31:0] keccak_dout_35_qs;
  logic keccak_dout_35_re;
  logic [31:0] keccak_dout_36_qs;
  logic keccak_dout_36_re;
  logic [31:0] keccak_dout_37_qs;
  logic keccak_dout_37_re;
  logic [31:0] keccak_dout_38_qs;
  logic keccak_dout_38_re;
  logic [31:0] keccak_dout_39_qs;
  logic keccak_dout_39_re;
  logic [31:0] keccak_dout_40_qs;
  logic keccak_dout_40_re;
  logic [31:0] keccak_dout_41_qs;
  logic keccak_dout_41_re;
  logic [31:0] keccak_dout_42_qs;
  logic keccak_dout_42_re;
  logic [31:0] keccak_dout_43_qs;
  logic keccak_dout_43_re;
  logic [31:0] keccak_dout_44_qs;
  logic keccak_dout_44_re;
  logic [31:0] keccak_dout_45_qs;
  logic keccak_dout_45_re;
  logic [31:0] keccak_dout_46_qs;
  logic keccak_dout_46_re;
  logic [31:0] keccak_dout_47_qs;
  logic keccak_dout_47_re;
  logic [31:0] keccak_dout_48_qs;
  logic keccak_dout_48_re;
  logic [31:0] keccak_dout_49_qs;
  logic keccak_dout_49_re;
  logic [31:0] trng_dout_qs;
  logic trng_dout_re;

  // Register instances

  // Subregister 0 of Multireg keccak_din
  // R[keccak_din_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_0_we),
    .wd     (keccak_din_0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[0].q ),

    .qs     ()
  );

  // Subregister 1 of Multireg keccak_din
  // R[keccak_din_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_1_we),
    .wd     (keccak_din_1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[1].q ),

    .qs     ()
  );

  // Subregister 2 of Multireg keccak_din
  // R[keccak_din_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_2_we),
    .wd     (keccak_din_2_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[2].q ),

    .qs     ()
  );

  // Subregister 3 of Multireg keccak_din
  // R[keccak_din_3]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_3_we),
    .wd     (keccak_din_3_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[3].q ),

    .qs     ()
  );

  // Subregister 4 of Multireg keccak_din
  // R[keccak_din_4]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_4 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_4_we),
    .wd     (keccak_din_4_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[4].q ),

    .qs     ()
  );

  // Subregister 5 of Multireg keccak_din
  // R[keccak_din_5]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_5 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_5_we),
    .wd     (keccak_din_5_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[5].q ),

    .qs     ()
  );

  // Subregister 6 of Multireg keccak_din
  // R[keccak_din_6]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_6 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_6_we),
    .wd     (keccak_din_6_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[6].q ),

    .qs     ()
  );

  // Subregister 7 of Multireg keccak_din
  // R[keccak_din_7]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_7 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_7_we),
    .wd     (keccak_din_7_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[7].q ),

    .qs     ()
  );

  // Subregister 8 of Multireg keccak_din
  // R[keccak_din_8]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_8 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_8_we),
    .wd     (keccak_din_8_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[8].q ),

    .qs     ()
  );

  // Subregister 9 of Multireg keccak_din
  // R[keccak_din_9]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_9 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_9_we),
    .wd     (keccak_din_9_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[9].q ),

    .qs     ()
  );

  // Subregister 10 of Multireg keccak_din
  // R[keccak_din_10]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_10 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_10_we),
    .wd     (keccak_din_10_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[10].q ),

    .qs     ()
  );

  // Subregister 11 of Multireg keccak_din
  // R[keccak_din_11]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_11 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_11_we),
    .wd     (keccak_din_11_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[11].q ),

    .qs     ()
  );

  // Subregister 12 of Multireg keccak_din
  // R[keccak_din_12]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_12 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_12_we),
    .wd     (keccak_din_12_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[12].q ),

    .qs     ()
  );

  // Subregister 13 of Multireg keccak_din
  // R[keccak_din_13]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_13 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_13_we),
    .wd     (keccak_din_13_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[13].q ),

    .qs     ()
  );

  // Subregister 14 of Multireg keccak_din
  // R[keccak_din_14]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_14 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_14_we),
    .wd     (keccak_din_14_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[14].q ),

    .qs     ()
  );

  // Subregister 15 of Multireg keccak_din
  // R[keccak_din_15]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_15 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_15_we),
    .wd     (keccak_din_15_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[15].q ),

    .qs     ()
  );

  // Subregister 16 of Multireg keccak_din
  // R[keccak_din_16]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_16 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_16_we),
    .wd     (keccak_din_16_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[16].q ),

    .qs     ()
  );

  // Subregister 17 of Multireg keccak_din
  // R[keccak_din_17]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_17 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_17_we),
    .wd     (keccak_din_17_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[17].q ),

    .qs     ()
  );

  // Subregister 18 of Multireg keccak_din
  // R[keccak_din_18]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_18 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_18_we),
    .wd     (keccak_din_18_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[18].q ),

    .qs     ()
  );

  // Subregister 19 of Multireg keccak_din
  // R[keccak_din_19]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_19 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_19_we),
    .wd     (keccak_din_19_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[19].q ),

    .qs     ()
  );

  // Subregister 20 of Multireg keccak_din
  // R[keccak_din_20]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_20 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_20_we),
    .wd     (keccak_din_20_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[20].q ),

    .qs     ()
  );

  // Subregister 21 of Multireg keccak_din
  // R[keccak_din_21]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_21 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_21_we),
    .wd     (keccak_din_21_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[21].q ),

    .qs     ()
  );

  // Subregister 22 of Multireg keccak_din
  // R[keccak_din_22]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_22 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_22_we),
    .wd     (keccak_din_22_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[22].q ),

    .qs     ()
  );

  // Subregister 23 of Multireg keccak_din
  // R[keccak_din_23]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_23 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_23_we),
    .wd     (keccak_din_23_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[23].q ),

    .qs     ()
  );

  // Subregister 24 of Multireg keccak_din
  // R[keccak_din_24]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_24 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_24_we),
    .wd     (keccak_din_24_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[24].q ),

    .qs     ()
  );

  // Subregister 25 of Multireg keccak_din
  // R[keccak_din_25]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_25 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_25_we),
    .wd     (keccak_din_25_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[25].q ),

    .qs     ()
  );

  // Subregister 26 of Multireg keccak_din
  // R[keccak_din_26]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_26 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_26_we),
    .wd     (keccak_din_26_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[26].q ),

    .qs     ()
  );

  // Subregister 27 of Multireg keccak_din
  // R[keccak_din_27]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_27 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_27_we),
    .wd     (keccak_din_27_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[27].q ),

    .qs     ()
  );

  // Subregister 28 of Multireg keccak_din
  // R[keccak_din_28]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_28 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_28_we),
    .wd     (keccak_din_28_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[28].q ),

    .qs     ()
  );

  // Subregister 29 of Multireg keccak_din
  // R[keccak_din_29]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_29 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_29_we),
    .wd     (keccak_din_29_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[29].q ),

    .qs     ()
  );

  // Subregister 30 of Multireg keccak_din
  // R[keccak_din_30]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_30 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_30_we),
    .wd     (keccak_din_30_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[30].q ),

    .qs     ()
  );

  // Subregister 31 of Multireg keccak_din
  // R[keccak_din_31]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_31 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_31_we),
    .wd     (keccak_din_31_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[31].q ),

    .qs     ()
  );

  // Subregister 32 of Multireg keccak_din
  // R[keccak_din_32]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_32 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_32_we),
    .wd     (keccak_din_32_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[32].q ),

    .qs     ()
  );

  // Subregister 33 of Multireg keccak_din
  // R[keccak_din_33]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_33 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_33_we),
    .wd     (keccak_din_33_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[33].q ),

    .qs     ()
  );

  // Subregister 34 of Multireg keccak_din
  // R[keccak_din_34]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_34 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_34_we),
    .wd     (keccak_din_34_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[34].q ),

    .qs     ()
  );

  // Subregister 35 of Multireg keccak_din
  // R[keccak_din_35]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_35 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_35_we),
    .wd     (keccak_din_35_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[35].q ),

    .qs     ()
  );

  // Subregister 36 of Multireg keccak_din
  // R[keccak_din_36]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_36 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_36_we),
    .wd     (keccak_din_36_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[36].q ),

    .qs     ()
  );

  // Subregister 37 of Multireg keccak_din
  // R[keccak_din_37]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_37 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_37_we),
    .wd     (keccak_din_37_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[37].q ),

    .qs     ()
  );

  // Subregister 38 of Multireg keccak_din
  // R[keccak_din_38]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_38 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_38_we),
    .wd     (keccak_din_38_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[38].q ),

    .qs     ()
  );

  // Subregister 39 of Multireg keccak_din
  // R[keccak_din_39]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_39 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_39_we),
    .wd     (keccak_din_39_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[39].q ),

    .qs     ()
  );

  // Subregister 40 of Multireg keccak_din
  // R[keccak_din_40]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_40 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_40_we),
    .wd     (keccak_din_40_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[40].q ),

    .qs     ()
  );

  // Subregister 41 of Multireg keccak_din
  // R[keccak_din_41]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_41 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_41_we),
    .wd     (keccak_din_41_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[41].q ),

    .qs     ()
  );

  // Subregister 42 of Multireg keccak_din
  // R[keccak_din_42]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_42 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_42_we),
    .wd     (keccak_din_42_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[42].q ),

    .qs     ()
  );

  // Subregister 43 of Multireg keccak_din
  // R[keccak_din_43]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_43 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_43_we),
    .wd     (keccak_din_43_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[43].q ),

    .qs     ()
  );

  // Subregister 44 of Multireg keccak_din
  // R[keccak_din_44]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_44 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_44_we),
    .wd     (keccak_din_44_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[44].q ),

    .qs     ()
  );

  // Subregister 45 of Multireg keccak_din
  // R[keccak_din_45]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_45 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_45_we),
    .wd     (keccak_din_45_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[45].q ),

    .qs     ()
  );

  // Subregister 46 of Multireg keccak_din
  // R[keccak_din_46]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_46 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_46_we),
    .wd     (keccak_din_46_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[46].q ),

    .qs     ()
  );

  // Subregister 47 of Multireg keccak_din
  // R[keccak_din_47]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_47 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_47_we),
    .wd     (keccak_din_47_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[47].q ),

    .qs     ()
  );

  // Subregister 48 of Multireg keccak_din
  // R[keccak_din_48]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_48 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_48_we),
    .wd     (keccak_din_48_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[48].q ),

    .qs     ()
  );

  // Subregister 49 of Multireg keccak_din
  // R[keccak_din_49]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("WO"),
    .RESVAL  (32'h0)
  ) u_keccak_din_49 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (keccak_din_49_we),
    .wd     (keccak_din_49_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.keccak_din[49].q ),

    .qs     ()
  );



  // Subregister 0 of Multireg keccak_dout
  // R[keccak_dout_0]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_0 (
    .re     (keccak_dout_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_0_qs)
  );

  // Subregister 1 of Multireg keccak_dout
  // R[keccak_dout_1]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_1 (
    .re     (keccak_dout_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_1_qs)
  );

  // Subregister 2 of Multireg keccak_dout
  // R[keccak_dout_2]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_2 (
    .re     (keccak_dout_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_2_qs)
  );

  // Subregister 3 of Multireg keccak_dout
  // R[keccak_dout_3]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_3 (
    .re     (keccak_dout_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_3_qs)
  );

  // Subregister 4 of Multireg keccak_dout
  // R[keccak_dout_4]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_4 (
    .re     (keccak_dout_4_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[4].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_4_qs)
  );

  // Subregister 5 of Multireg keccak_dout
  // R[keccak_dout_5]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_5 (
    .re     (keccak_dout_5_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[5].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_5_qs)
  );

  // Subregister 6 of Multireg keccak_dout
  // R[keccak_dout_6]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_6 (
    .re     (keccak_dout_6_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[6].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_6_qs)
  );

  // Subregister 7 of Multireg keccak_dout
  // R[keccak_dout_7]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_7 (
    .re     (keccak_dout_7_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[7].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_7_qs)
  );

  // Subregister 8 of Multireg keccak_dout
  // R[keccak_dout_8]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_8 (
    .re     (keccak_dout_8_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[8].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_8_qs)
  );

  // Subregister 9 of Multireg keccak_dout
  // R[keccak_dout_9]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_9 (
    .re     (keccak_dout_9_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[9].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_9_qs)
  );

  // Subregister 10 of Multireg keccak_dout
  // R[keccak_dout_10]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_10 (
    .re     (keccak_dout_10_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[10].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_10_qs)
  );

  // Subregister 11 of Multireg keccak_dout
  // R[keccak_dout_11]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_11 (
    .re     (keccak_dout_11_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[11].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_11_qs)
  );

  // Subregister 12 of Multireg keccak_dout
  // R[keccak_dout_12]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_12 (
    .re     (keccak_dout_12_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[12].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_12_qs)
  );

  // Subregister 13 of Multireg keccak_dout
  // R[keccak_dout_13]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_13 (
    .re     (keccak_dout_13_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[13].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_13_qs)
  );

  // Subregister 14 of Multireg keccak_dout
  // R[keccak_dout_14]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_14 (
    .re     (keccak_dout_14_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[14].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_14_qs)
  );

  // Subregister 15 of Multireg keccak_dout
  // R[keccak_dout_15]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_15 (
    .re     (keccak_dout_15_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[15].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_15_qs)
  );

  // Subregister 16 of Multireg keccak_dout
  // R[keccak_dout_16]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_16 (
    .re     (keccak_dout_16_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[16].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_16_qs)
  );

  // Subregister 17 of Multireg keccak_dout
  // R[keccak_dout_17]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_17 (
    .re     (keccak_dout_17_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[17].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_17_qs)
  );

  // Subregister 18 of Multireg keccak_dout
  // R[keccak_dout_18]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_18 (
    .re     (keccak_dout_18_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[18].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_18_qs)
  );

  // Subregister 19 of Multireg keccak_dout
  // R[keccak_dout_19]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_19 (
    .re     (keccak_dout_19_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[19].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_19_qs)
  );

  // Subregister 20 of Multireg keccak_dout
  // R[keccak_dout_20]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_20 (
    .re     (keccak_dout_20_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[20].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_20_qs)
  );

  // Subregister 21 of Multireg keccak_dout
  // R[keccak_dout_21]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_21 (
    .re     (keccak_dout_21_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[21].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_21_qs)
  );

  // Subregister 22 of Multireg keccak_dout
  // R[keccak_dout_22]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_22 (
    .re     (keccak_dout_22_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[22].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_22_qs)
  );

  // Subregister 23 of Multireg keccak_dout
  // R[keccak_dout_23]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_23 (
    .re     (keccak_dout_23_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[23].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_23_qs)
  );

  // Subregister 24 of Multireg keccak_dout
  // R[keccak_dout_24]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_24 (
    .re     (keccak_dout_24_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[24].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_24_qs)
  );

  // Subregister 25 of Multireg keccak_dout
  // R[keccak_dout_25]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_25 (
    .re     (keccak_dout_25_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[25].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_25_qs)
  );

  // Subregister 26 of Multireg keccak_dout
  // R[keccak_dout_26]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_26 (
    .re     (keccak_dout_26_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[26].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_26_qs)
  );

  // Subregister 27 of Multireg keccak_dout
  // R[keccak_dout_27]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_27 (
    .re     (keccak_dout_27_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[27].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_27_qs)
  );

  // Subregister 28 of Multireg keccak_dout
  // R[keccak_dout_28]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_28 (
    .re     (keccak_dout_28_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[28].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_28_qs)
  );

  // Subregister 29 of Multireg keccak_dout
  // R[keccak_dout_29]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_29 (
    .re     (keccak_dout_29_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[29].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_29_qs)
  );

  // Subregister 30 of Multireg keccak_dout
  // R[keccak_dout_30]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_30 (
    .re     (keccak_dout_30_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[30].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_30_qs)
  );

  // Subregister 31 of Multireg keccak_dout
  // R[keccak_dout_31]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_31 (
    .re     (keccak_dout_31_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[31].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_31_qs)
  );

  // Subregister 32 of Multireg keccak_dout
  // R[keccak_dout_32]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_32 (
    .re     (keccak_dout_32_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[32].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_32_qs)
  );

  // Subregister 33 of Multireg keccak_dout
  // R[keccak_dout_33]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_33 (
    .re     (keccak_dout_33_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[33].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_33_qs)
  );

  // Subregister 34 of Multireg keccak_dout
  // R[keccak_dout_34]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_34 (
    .re     (keccak_dout_34_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[34].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_34_qs)
  );

  // Subregister 35 of Multireg keccak_dout
  // R[keccak_dout_35]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_35 (
    .re     (keccak_dout_35_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[35].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_35_qs)
  );

  // Subregister 36 of Multireg keccak_dout
  // R[keccak_dout_36]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_36 (
    .re     (keccak_dout_36_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[36].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_36_qs)
  );

  // Subregister 37 of Multireg keccak_dout
  // R[keccak_dout_37]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_37 (
    .re     (keccak_dout_37_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[37].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_37_qs)
  );

  // Subregister 38 of Multireg keccak_dout
  // R[keccak_dout_38]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_38 (
    .re     (keccak_dout_38_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[38].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_38_qs)
  );

  // Subregister 39 of Multireg keccak_dout
  // R[keccak_dout_39]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_39 (
    .re     (keccak_dout_39_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[39].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_39_qs)
  );

  // Subregister 40 of Multireg keccak_dout
  // R[keccak_dout_40]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_40 (
    .re     (keccak_dout_40_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[40].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_40_qs)
  );

  // Subregister 41 of Multireg keccak_dout
  // R[keccak_dout_41]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_41 (
    .re     (keccak_dout_41_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[41].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_41_qs)
  );

  // Subregister 42 of Multireg keccak_dout
  // R[keccak_dout_42]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_42 (
    .re     (keccak_dout_42_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[42].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_42_qs)
  );

  // Subregister 43 of Multireg keccak_dout
  // R[keccak_dout_43]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_43 (
    .re     (keccak_dout_43_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[43].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_43_qs)
  );

  // Subregister 44 of Multireg keccak_dout
  // R[keccak_dout_44]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_44 (
    .re     (keccak_dout_44_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[44].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_44_qs)
  );

  // Subregister 45 of Multireg keccak_dout
  // R[keccak_dout_45]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_45 (
    .re     (keccak_dout_45_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[45].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_45_qs)
  );

  // Subregister 46 of Multireg keccak_dout
  // R[keccak_dout_46]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_46 (
    .re     (keccak_dout_46_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[46].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_46_qs)
  );

  // Subregister 47 of Multireg keccak_dout
  // R[keccak_dout_47]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_47 (
    .re     (keccak_dout_47_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[47].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_47_qs)
  );

  // Subregister 48 of Multireg keccak_dout
  // R[keccak_dout_48]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_48 (
    .re     (keccak_dout_48_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[48].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_48_qs)
  );

  // Subregister 49 of Multireg keccak_dout
  // R[keccak_dout_49]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_keccak_dout_49 (
    .re     (keccak_dout_49_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.keccak_dout[49].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (keccak_dout_49_qs)
  );


  // R[trng_dout]: V(True)

  prim_subreg_ext #(
    .DW    (32)
  ) u_trng_dout (
    .re     (trng_dout_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.trng_dout.d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (trng_dout_qs)
  );




  logic [100:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[  0] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_0_OFFSET);
    addr_hit[  1] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_1_OFFSET);
    addr_hit[  2] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_2_OFFSET);
    addr_hit[  3] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_3_OFFSET);
    addr_hit[  4] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_4_OFFSET);
    addr_hit[  5] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_5_OFFSET);
    addr_hit[  6] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_6_OFFSET);
    addr_hit[  7] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_7_OFFSET);
    addr_hit[  8] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_8_OFFSET);
    addr_hit[  9] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_9_OFFSET);
    addr_hit[ 10] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_10_OFFSET);
    addr_hit[ 11] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_11_OFFSET);
    addr_hit[ 12] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_12_OFFSET);
    addr_hit[ 13] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_13_OFFSET);
    addr_hit[ 14] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_14_OFFSET);
    addr_hit[ 15] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_15_OFFSET);
    addr_hit[ 16] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_16_OFFSET);
    addr_hit[ 17] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_17_OFFSET);
    addr_hit[ 18] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_18_OFFSET);
    addr_hit[ 19] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_19_OFFSET);
    addr_hit[ 20] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_20_OFFSET);
    addr_hit[ 21] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_21_OFFSET);
    addr_hit[ 22] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_22_OFFSET);
    addr_hit[ 23] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_23_OFFSET);
    addr_hit[ 24] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_24_OFFSET);
    addr_hit[ 25] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_25_OFFSET);
    addr_hit[ 26] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_26_OFFSET);
    addr_hit[ 27] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_27_OFFSET);
    addr_hit[ 28] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_28_OFFSET);
    addr_hit[ 29] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_29_OFFSET);
    addr_hit[ 30] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_30_OFFSET);
    addr_hit[ 31] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_31_OFFSET);
    addr_hit[ 32] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_32_OFFSET);
    addr_hit[ 33] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_33_OFFSET);
    addr_hit[ 34] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_34_OFFSET);
    addr_hit[ 35] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_35_OFFSET);
    addr_hit[ 36] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_36_OFFSET);
    addr_hit[ 37] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_37_OFFSET);
    addr_hit[ 38] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_38_OFFSET);
    addr_hit[ 39] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_39_OFFSET);
    addr_hit[ 40] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_40_OFFSET);
    addr_hit[ 41] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_41_OFFSET);
    addr_hit[ 42] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_42_OFFSET);
    addr_hit[ 43] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_43_OFFSET);
    addr_hit[ 44] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_44_OFFSET);
    addr_hit[ 45] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_45_OFFSET);
    addr_hit[ 46] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_46_OFFSET);
    addr_hit[ 47] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_47_OFFSET);
    addr_hit[ 48] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_48_OFFSET);
    addr_hit[ 49] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DIN_49_OFFSET);
    addr_hit[ 50] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_0_OFFSET);
    addr_hit[ 51] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_1_OFFSET);
    addr_hit[ 52] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_2_OFFSET);
    addr_hit[ 53] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_3_OFFSET);
    addr_hit[ 54] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_4_OFFSET);
    addr_hit[ 55] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_5_OFFSET);
    addr_hit[ 56] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_6_OFFSET);
    addr_hit[ 57] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_7_OFFSET);
    addr_hit[ 58] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_8_OFFSET);
    addr_hit[ 59] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_9_OFFSET);
    addr_hit[ 60] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_10_OFFSET);
    addr_hit[ 61] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_11_OFFSET);
    addr_hit[ 62] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_12_OFFSET);
    addr_hit[ 63] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_13_OFFSET);
    addr_hit[ 64] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_14_OFFSET);
    addr_hit[ 65] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_15_OFFSET);
    addr_hit[ 66] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_16_OFFSET);
    addr_hit[ 67] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_17_OFFSET);
    addr_hit[ 68] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_18_OFFSET);
    addr_hit[ 69] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_19_OFFSET);
    addr_hit[ 70] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_20_OFFSET);
    addr_hit[ 71] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_21_OFFSET);
    addr_hit[ 72] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_22_OFFSET);
    addr_hit[ 73] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_23_OFFSET);
    addr_hit[ 74] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_24_OFFSET);
    addr_hit[ 75] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_25_OFFSET);
    addr_hit[ 76] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_26_OFFSET);
    addr_hit[ 77] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_27_OFFSET);
    addr_hit[ 78] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_28_OFFSET);
    addr_hit[ 79] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_29_OFFSET);
    addr_hit[ 80] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_30_OFFSET);
    addr_hit[ 81] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_31_OFFSET);
    addr_hit[ 82] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_32_OFFSET);
    addr_hit[ 83] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_33_OFFSET);
    addr_hit[ 84] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_34_OFFSET);
    addr_hit[ 85] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_35_OFFSET);
    addr_hit[ 86] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_36_OFFSET);
    addr_hit[ 87] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_37_OFFSET);
    addr_hit[ 88] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_38_OFFSET);
    addr_hit[ 89] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_39_OFFSET);
    addr_hit[ 90] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_40_OFFSET);
    addr_hit[ 91] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_41_OFFSET);
    addr_hit[ 92] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_42_OFFSET);
    addr_hit[ 93] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_43_OFFSET);
    addr_hit[ 94] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_44_OFFSET);
    addr_hit[ 95] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_45_OFFSET);
    addr_hit[ 96] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_46_OFFSET);
    addr_hit[ 97] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_47_OFFSET);
    addr_hit[ 98] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_48_OFFSET);
    addr_hit[ 99] = (reg_addr == TRNG_KECCAK_DATA_KECCAK_DOUT_49_OFFSET);
    addr_hit[100] = (reg_addr == TRNG_KECCAK_DATA_TRNG_DOUT_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[  0] & (|(TRNG_KECCAK_DATA_PERMIT[  0] & ~reg_be))) |
               (addr_hit[  1] & (|(TRNG_KECCAK_DATA_PERMIT[  1] & ~reg_be))) |
               (addr_hit[  2] & (|(TRNG_KECCAK_DATA_PERMIT[  2] & ~reg_be))) |
               (addr_hit[  3] & (|(TRNG_KECCAK_DATA_PERMIT[  3] & ~reg_be))) |
               (addr_hit[  4] & (|(TRNG_KECCAK_DATA_PERMIT[  4] & ~reg_be))) |
               (addr_hit[  5] & (|(TRNG_KECCAK_DATA_PERMIT[  5] & ~reg_be))) |
               (addr_hit[  6] & (|(TRNG_KECCAK_DATA_PERMIT[  6] & ~reg_be))) |
               (addr_hit[  7] & (|(TRNG_KECCAK_DATA_PERMIT[  7] & ~reg_be))) |
               (addr_hit[  8] & (|(TRNG_KECCAK_DATA_PERMIT[  8] & ~reg_be))) |
               (addr_hit[  9] & (|(TRNG_KECCAK_DATA_PERMIT[  9] & ~reg_be))) |
               (addr_hit[ 10] & (|(TRNG_KECCAK_DATA_PERMIT[ 10] & ~reg_be))) |
               (addr_hit[ 11] & (|(TRNG_KECCAK_DATA_PERMIT[ 11] & ~reg_be))) |
               (addr_hit[ 12] & (|(TRNG_KECCAK_DATA_PERMIT[ 12] & ~reg_be))) |
               (addr_hit[ 13] & (|(TRNG_KECCAK_DATA_PERMIT[ 13] & ~reg_be))) |
               (addr_hit[ 14] & (|(TRNG_KECCAK_DATA_PERMIT[ 14] & ~reg_be))) |
               (addr_hit[ 15] & (|(TRNG_KECCAK_DATA_PERMIT[ 15] & ~reg_be))) |
               (addr_hit[ 16] & (|(TRNG_KECCAK_DATA_PERMIT[ 16] & ~reg_be))) |
               (addr_hit[ 17] & (|(TRNG_KECCAK_DATA_PERMIT[ 17] & ~reg_be))) |
               (addr_hit[ 18] & (|(TRNG_KECCAK_DATA_PERMIT[ 18] & ~reg_be))) |
               (addr_hit[ 19] & (|(TRNG_KECCAK_DATA_PERMIT[ 19] & ~reg_be))) |
               (addr_hit[ 20] & (|(TRNG_KECCAK_DATA_PERMIT[ 20] & ~reg_be))) |
               (addr_hit[ 21] & (|(TRNG_KECCAK_DATA_PERMIT[ 21] & ~reg_be))) |
               (addr_hit[ 22] & (|(TRNG_KECCAK_DATA_PERMIT[ 22] & ~reg_be))) |
               (addr_hit[ 23] & (|(TRNG_KECCAK_DATA_PERMIT[ 23] & ~reg_be))) |
               (addr_hit[ 24] & (|(TRNG_KECCAK_DATA_PERMIT[ 24] & ~reg_be))) |
               (addr_hit[ 25] & (|(TRNG_KECCAK_DATA_PERMIT[ 25] & ~reg_be))) |
               (addr_hit[ 26] & (|(TRNG_KECCAK_DATA_PERMIT[ 26] & ~reg_be))) |
               (addr_hit[ 27] & (|(TRNG_KECCAK_DATA_PERMIT[ 27] & ~reg_be))) |
               (addr_hit[ 28] & (|(TRNG_KECCAK_DATA_PERMIT[ 28] & ~reg_be))) |
               (addr_hit[ 29] & (|(TRNG_KECCAK_DATA_PERMIT[ 29] & ~reg_be))) |
               (addr_hit[ 30] & (|(TRNG_KECCAK_DATA_PERMIT[ 30] & ~reg_be))) |
               (addr_hit[ 31] & (|(TRNG_KECCAK_DATA_PERMIT[ 31] & ~reg_be))) |
               (addr_hit[ 32] & (|(TRNG_KECCAK_DATA_PERMIT[ 32] & ~reg_be))) |
               (addr_hit[ 33] & (|(TRNG_KECCAK_DATA_PERMIT[ 33] & ~reg_be))) |
               (addr_hit[ 34] & (|(TRNG_KECCAK_DATA_PERMIT[ 34] & ~reg_be))) |
               (addr_hit[ 35] & (|(TRNG_KECCAK_DATA_PERMIT[ 35] & ~reg_be))) |
               (addr_hit[ 36] & (|(TRNG_KECCAK_DATA_PERMIT[ 36] & ~reg_be))) |
               (addr_hit[ 37] & (|(TRNG_KECCAK_DATA_PERMIT[ 37] & ~reg_be))) |
               (addr_hit[ 38] & (|(TRNG_KECCAK_DATA_PERMIT[ 38] & ~reg_be))) |
               (addr_hit[ 39] & (|(TRNG_KECCAK_DATA_PERMIT[ 39] & ~reg_be))) |
               (addr_hit[ 40] & (|(TRNG_KECCAK_DATA_PERMIT[ 40] & ~reg_be))) |
               (addr_hit[ 41] & (|(TRNG_KECCAK_DATA_PERMIT[ 41] & ~reg_be))) |
               (addr_hit[ 42] & (|(TRNG_KECCAK_DATA_PERMIT[ 42] & ~reg_be))) |
               (addr_hit[ 43] & (|(TRNG_KECCAK_DATA_PERMIT[ 43] & ~reg_be))) |
               (addr_hit[ 44] & (|(TRNG_KECCAK_DATA_PERMIT[ 44] & ~reg_be))) |
               (addr_hit[ 45] & (|(TRNG_KECCAK_DATA_PERMIT[ 45] & ~reg_be))) |
               (addr_hit[ 46] & (|(TRNG_KECCAK_DATA_PERMIT[ 46] & ~reg_be))) |
               (addr_hit[ 47] & (|(TRNG_KECCAK_DATA_PERMIT[ 47] & ~reg_be))) |
               (addr_hit[ 48] & (|(TRNG_KECCAK_DATA_PERMIT[ 48] & ~reg_be))) |
               (addr_hit[ 49] & (|(TRNG_KECCAK_DATA_PERMIT[ 49] & ~reg_be))) |
               (addr_hit[ 50] & (|(TRNG_KECCAK_DATA_PERMIT[ 50] & ~reg_be))) |
               (addr_hit[ 51] & (|(TRNG_KECCAK_DATA_PERMIT[ 51] & ~reg_be))) |
               (addr_hit[ 52] & (|(TRNG_KECCAK_DATA_PERMIT[ 52] & ~reg_be))) |
               (addr_hit[ 53] & (|(TRNG_KECCAK_DATA_PERMIT[ 53] & ~reg_be))) |
               (addr_hit[ 54] & (|(TRNG_KECCAK_DATA_PERMIT[ 54] & ~reg_be))) |
               (addr_hit[ 55] & (|(TRNG_KECCAK_DATA_PERMIT[ 55] & ~reg_be))) |
               (addr_hit[ 56] & (|(TRNG_KECCAK_DATA_PERMIT[ 56] & ~reg_be))) |
               (addr_hit[ 57] & (|(TRNG_KECCAK_DATA_PERMIT[ 57] & ~reg_be))) |
               (addr_hit[ 58] & (|(TRNG_KECCAK_DATA_PERMIT[ 58] & ~reg_be))) |
               (addr_hit[ 59] & (|(TRNG_KECCAK_DATA_PERMIT[ 59] & ~reg_be))) |
               (addr_hit[ 60] & (|(TRNG_KECCAK_DATA_PERMIT[ 60] & ~reg_be))) |
               (addr_hit[ 61] & (|(TRNG_KECCAK_DATA_PERMIT[ 61] & ~reg_be))) |
               (addr_hit[ 62] & (|(TRNG_KECCAK_DATA_PERMIT[ 62] & ~reg_be))) |
               (addr_hit[ 63] & (|(TRNG_KECCAK_DATA_PERMIT[ 63] & ~reg_be))) |
               (addr_hit[ 64] & (|(TRNG_KECCAK_DATA_PERMIT[ 64] & ~reg_be))) |
               (addr_hit[ 65] & (|(TRNG_KECCAK_DATA_PERMIT[ 65] & ~reg_be))) |
               (addr_hit[ 66] & (|(TRNG_KECCAK_DATA_PERMIT[ 66] & ~reg_be))) |
               (addr_hit[ 67] & (|(TRNG_KECCAK_DATA_PERMIT[ 67] & ~reg_be))) |
               (addr_hit[ 68] & (|(TRNG_KECCAK_DATA_PERMIT[ 68] & ~reg_be))) |
               (addr_hit[ 69] & (|(TRNG_KECCAK_DATA_PERMIT[ 69] & ~reg_be))) |
               (addr_hit[ 70] & (|(TRNG_KECCAK_DATA_PERMIT[ 70] & ~reg_be))) |
               (addr_hit[ 71] & (|(TRNG_KECCAK_DATA_PERMIT[ 71] & ~reg_be))) |
               (addr_hit[ 72] & (|(TRNG_KECCAK_DATA_PERMIT[ 72] & ~reg_be))) |
               (addr_hit[ 73] & (|(TRNG_KECCAK_DATA_PERMIT[ 73] & ~reg_be))) |
               (addr_hit[ 74] & (|(TRNG_KECCAK_DATA_PERMIT[ 74] & ~reg_be))) |
               (addr_hit[ 75] & (|(TRNG_KECCAK_DATA_PERMIT[ 75] & ~reg_be))) |
               (addr_hit[ 76] & (|(TRNG_KECCAK_DATA_PERMIT[ 76] & ~reg_be))) |
               (addr_hit[ 77] & (|(TRNG_KECCAK_DATA_PERMIT[ 77] & ~reg_be))) |
               (addr_hit[ 78] & (|(TRNG_KECCAK_DATA_PERMIT[ 78] & ~reg_be))) |
               (addr_hit[ 79] & (|(TRNG_KECCAK_DATA_PERMIT[ 79] & ~reg_be))) |
               (addr_hit[ 80] & (|(TRNG_KECCAK_DATA_PERMIT[ 80] & ~reg_be))) |
               (addr_hit[ 81] & (|(TRNG_KECCAK_DATA_PERMIT[ 81] & ~reg_be))) |
               (addr_hit[ 82] & (|(TRNG_KECCAK_DATA_PERMIT[ 82] & ~reg_be))) |
               (addr_hit[ 83] & (|(TRNG_KECCAK_DATA_PERMIT[ 83] & ~reg_be))) |
               (addr_hit[ 84] & (|(TRNG_KECCAK_DATA_PERMIT[ 84] & ~reg_be))) |
               (addr_hit[ 85] & (|(TRNG_KECCAK_DATA_PERMIT[ 85] & ~reg_be))) |
               (addr_hit[ 86] & (|(TRNG_KECCAK_DATA_PERMIT[ 86] & ~reg_be))) |
               (addr_hit[ 87] & (|(TRNG_KECCAK_DATA_PERMIT[ 87] & ~reg_be))) |
               (addr_hit[ 88] & (|(TRNG_KECCAK_DATA_PERMIT[ 88] & ~reg_be))) |
               (addr_hit[ 89] & (|(TRNG_KECCAK_DATA_PERMIT[ 89] & ~reg_be))) |
               (addr_hit[ 90] & (|(TRNG_KECCAK_DATA_PERMIT[ 90] & ~reg_be))) |
               (addr_hit[ 91] & (|(TRNG_KECCAK_DATA_PERMIT[ 91] & ~reg_be))) |
               (addr_hit[ 92] & (|(TRNG_KECCAK_DATA_PERMIT[ 92] & ~reg_be))) |
               (addr_hit[ 93] & (|(TRNG_KECCAK_DATA_PERMIT[ 93] & ~reg_be))) |
               (addr_hit[ 94] & (|(TRNG_KECCAK_DATA_PERMIT[ 94] & ~reg_be))) |
               (addr_hit[ 95] & (|(TRNG_KECCAK_DATA_PERMIT[ 95] & ~reg_be))) |
               (addr_hit[ 96] & (|(TRNG_KECCAK_DATA_PERMIT[ 96] & ~reg_be))) |
               (addr_hit[ 97] & (|(TRNG_KECCAK_DATA_PERMIT[ 97] & ~reg_be))) |
               (addr_hit[ 98] & (|(TRNG_KECCAK_DATA_PERMIT[ 98] & ~reg_be))) |
               (addr_hit[ 99] & (|(TRNG_KECCAK_DATA_PERMIT[ 99] & ~reg_be))) |
               (addr_hit[100] & (|(TRNG_KECCAK_DATA_PERMIT[100] & ~reg_be)))));
  end

  assign keccak_din_0_we = addr_hit[0] & reg_we & !reg_error;
  assign keccak_din_0_wd = reg_wdata[31:0];

  assign keccak_din_1_we = addr_hit[1] & reg_we & !reg_error;
  assign keccak_din_1_wd = reg_wdata[31:0];

  assign keccak_din_2_we = addr_hit[2] & reg_we & !reg_error;
  assign keccak_din_2_wd = reg_wdata[31:0];

  assign keccak_din_3_we = addr_hit[3] & reg_we & !reg_error;
  assign keccak_din_3_wd = reg_wdata[31:0];

  assign keccak_din_4_we = addr_hit[4] & reg_we & !reg_error;
  assign keccak_din_4_wd = reg_wdata[31:0];

  assign keccak_din_5_we = addr_hit[5] & reg_we & !reg_error;
  assign keccak_din_5_wd = reg_wdata[31:0];

  assign keccak_din_6_we = addr_hit[6] & reg_we & !reg_error;
  assign keccak_din_6_wd = reg_wdata[31:0];

  assign keccak_din_7_we = addr_hit[7] & reg_we & !reg_error;
  assign keccak_din_7_wd = reg_wdata[31:0];

  assign keccak_din_8_we = addr_hit[8] & reg_we & !reg_error;
  assign keccak_din_8_wd = reg_wdata[31:0];

  assign keccak_din_9_we = addr_hit[9] & reg_we & !reg_error;
  assign keccak_din_9_wd = reg_wdata[31:0];

  assign keccak_din_10_we = addr_hit[10] & reg_we & !reg_error;
  assign keccak_din_10_wd = reg_wdata[31:0];

  assign keccak_din_11_we = addr_hit[11] & reg_we & !reg_error;
  assign keccak_din_11_wd = reg_wdata[31:0];

  assign keccak_din_12_we = addr_hit[12] & reg_we & !reg_error;
  assign keccak_din_12_wd = reg_wdata[31:0];

  assign keccak_din_13_we = addr_hit[13] & reg_we & !reg_error;
  assign keccak_din_13_wd = reg_wdata[31:0];

  assign keccak_din_14_we = addr_hit[14] & reg_we & !reg_error;
  assign keccak_din_14_wd = reg_wdata[31:0];

  assign keccak_din_15_we = addr_hit[15] & reg_we & !reg_error;
  assign keccak_din_15_wd = reg_wdata[31:0];

  assign keccak_din_16_we = addr_hit[16] & reg_we & !reg_error;
  assign keccak_din_16_wd = reg_wdata[31:0];

  assign keccak_din_17_we = addr_hit[17] & reg_we & !reg_error;
  assign keccak_din_17_wd = reg_wdata[31:0];

  assign keccak_din_18_we = addr_hit[18] & reg_we & !reg_error;
  assign keccak_din_18_wd = reg_wdata[31:0];

  assign keccak_din_19_we = addr_hit[19] & reg_we & !reg_error;
  assign keccak_din_19_wd = reg_wdata[31:0];

  assign keccak_din_20_we = addr_hit[20] & reg_we & !reg_error;
  assign keccak_din_20_wd = reg_wdata[31:0];

  assign keccak_din_21_we = addr_hit[21] & reg_we & !reg_error;
  assign keccak_din_21_wd = reg_wdata[31:0];

  assign keccak_din_22_we = addr_hit[22] & reg_we & !reg_error;
  assign keccak_din_22_wd = reg_wdata[31:0];

  assign keccak_din_23_we = addr_hit[23] & reg_we & !reg_error;
  assign keccak_din_23_wd = reg_wdata[31:0];

  assign keccak_din_24_we = addr_hit[24] & reg_we & !reg_error;
  assign keccak_din_24_wd = reg_wdata[31:0];

  assign keccak_din_25_we = addr_hit[25] & reg_we & !reg_error;
  assign keccak_din_25_wd = reg_wdata[31:0];

  assign keccak_din_26_we = addr_hit[26] & reg_we & !reg_error;
  assign keccak_din_26_wd = reg_wdata[31:0];

  assign keccak_din_27_we = addr_hit[27] & reg_we & !reg_error;
  assign keccak_din_27_wd = reg_wdata[31:0];

  assign keccak_din_28_we = addr_hit[28] & reg_we & !reg_error;
  assign keccak_din_28_wd = reg_wdata[31:0];

  assign keccak_din_29_we = addr_hit[29] & reg_we & !reg_error;
  assign keccak_din_29_wd = reg_wdata[31:0];

  assign keccak_din_30_we = addr_hit[30] & reg_we & !reg_error;
  assign keccak_din_30_wd = reg_wdata[31:0];

  assign keccak_din_31_we = addr_hit[31] & reg_we & !reg_error;
  assign keccak_din_31_wd = reg_wdata[31:0];

  assign keccak_din_32_we = addr_hit[32] & reg_we & !reg_error;
  assign keccak_din_32_wd = reg_wdata[31:0];

  assign keccak_din_33_we = addr_hit[33] & reg_we & !reg_error;
  assign keccak_din_33_wd = reg_wdata[31:0];

  assign keccak_din_34_we = addr_hit[34] & reg_we & !reg_error;
  assign keccak_din_34_wd = reg_wdata[31:0];

  assign keccak_din_35_we = addr_hit[35] & reg_we & !reg_error;
  assign keccak_din_35_wd = reg_wdata[31:0];

  assign keccak_din_36_we = addr_hit[36] & reg_we & !reg_error;
  assign keccak_din_36_wd = reg_wdata[31:0];

  assign keccak_din_37_we = addr_hit[37] & reg_we & !reg_error;
  assign keccak_din_37_wd = reg_wdata[31:0];

  assign keccak_din_38_we = addr_hit[38] & reg_we & !reg_error;
  assign keccak_din_38_wd = reg_wdata[31:0];

  assign keccak_din_39_we = addr_hit[39] & reg_we & !reg_error;
  assign keccak_din_39_wd = reg_wdata[31:0];

  assign keccak_din_40_we = addr_hit[40] & reg_we & !reg_error;
  assign keccak_din_40_wd = reg_wdata[31:0];

  assign keccak_din_41_we = addr_hit[41] & reg_we & !reg_error;
  assign keccak_din_41_wd = reg_wdata[31:0];

  assign keccak_din_42_we = addr_hit[42] & reg_we & !reg_error;
  assign keccak_din_42_wd = reg_wdata[31:0];

  assign keccak_din_43_we = addr_hit[43] & reg_we & !reg_error;
  assign keccak_din_43_wd = reg_wdata[31:0];

  assign keccak_din_44_we = addr_hit[44] & reg_we & !reg_error;
  assign keccak_din_44_wd = reg_wdata[31:0];

  assign keccak_din_45_we = addr_hit[45] & reg_we & !reg_error;
  assign keccak_din_45_wd = reg_wdata[31:0];

  assign keccak_din_46_we = addr_hit[46] & reg_we & !reg_error;
  assign keccak_din_46_wd = reg_wdata[31:0];

  assign keccak_din_47_we = addr_hit[47] & reg_we & !reg_error;
  assign keccak_din_47_wd = reg_wdata[31:0];

  assign keccak_din_48_we = addr_hit[48] & reg_we & !reg_error;
  assign keccak_din_48_wd = reg_wdata[31:0];

  assign keccak_din_49_we = addr_hit[49] & reg_we & !reg_error;
  assign keccak_din_49_wd = reg_wdata[31:0];

  assign keccak_dout_0_re = addr_hit[50] & reg_re & !reg_error;

  assign keccak_dout_1_re = addr_hit[51] & reg_re & !reg_error;

  assign keccak_dout_2_re = addr_hit[52] & reg_re & !reg_error;

  assign keccak_dout_3_re = addr_hit[53] & reg_re & !reg_error;

  assign keccak_dout_4_re = addr_hit[54] & reg_re & !reg_error;

  assign keccak_dout_5_re = addr_hit[55] & reg_re & !reg_error;

  assign keccak_dout_6_re = addr_hit[56] & reg_re & !reg_error;

  assign keccak_dout_7_re = addr_hit[57] & reg_re & !reg_error;

  assign keccak_dout_8_re = addr_hit[58] & reg_re & !reg_error;

  assign keccak_dout_9_re = addr_hit[59] & reg_re & !reg_error;

  assign keccak_dout_10_re = addr_hit[60] & reg_re & !reg_error;

  assign keccak_dout_11_re = addr_hit[61] & reg_re & !reg_error;

  assign keccak_dout_12_re = addr_hit[62] & reg_re & !reg_error;

  assign keccak_dout_13_re = addr_hit[63] & reg_re & !reg_error;

  assign keccak_dout_14_re = addr_hit[64] & reg_re & !reg_error;

  assign keccak_dout_15_re = addr_hit[65] & reg_re & !reg_error;

  assign keccak_dout_16_re = addr_hit[66] & reg_re & !reg_error;

  assign keccak_dout_17_re = addr_hit[67] & reg_re & !reg_error;

  assign keccak_dout_18_re = addr_hit[68] & reg_re & !reg_error;

  assign keccak_dout_19_re = addr_hit[69] & reg_re & !reg_error;

  assign keccak_dout_20_re = addr_hit[70] & reg_re & !reg_error;

  assign keccak_dout_21_re = addr_hit[71] & reg_re & !reg_error;

  assign keccak_dout_22_re = addr_hit[72] & reg_re & !reg_error;

  assign keccak_dout_23_re = addr_hit[73] & reg_re & !reg_error;

  assign keccak_dout_24_re = addr_hit[74] & reg_re & !reg_error;

  assign keccak_dout_25_re = addr_hit[75] & reg_re & !reg_error;

  assign keccak_dout_26_re = addr_hit[76] & reg_re & !reg_error;

  assign keccak_dout_27_re = addr_hit[77] & reg_re & !reg_error;

  assign keccak_dout_28_re = addr_hit[78] & reg_re & !reg_error;

  assign keccak_dout_29_re = addr_hit[79] & reg_re & !reg_error;

  assign keccak_dout_30_re = addr_hit[80] & reg_re & !reg_error;

  assign keccak_dout_31_re = addr_hit[81] & reg_re & !reg_error;

  assign keccak_dout_32_re = addr_hit[82] & reg_re & !reg_error;

  assign keccak_dout_33_re = addr_hit[83] & reg_re & !reg_error;

  assign keccak_dout_34_re = addr_hit[84] & reg_re & !reg_error;

  assign keccak_dout_35_re = addr_hit[85] & reg_re & !reg_error;

  assign keccak_dout_36_re = addr_hit[86] & reg_re & !reg_error;

  assign keccak_dout_37_re = addr_hit[87] & reg_re & !reg_error;

  assign keccak_dout_38_re = addr_hit[88] & reg_re & !reg_error;

  assign keccak_dout_39_re = addr_hit[89] & reg_re & !reg_error;

  assign keccak_dout_40_re = addr_hit[90] & reg_re & !reg_error;

  assign keccak_dout_41_re = addr_hit[91] & reg_re & !reg_error;

  assign keccak_dout_42_re = addr_hit[92] & reg_re & !reg_error;

  assign keccak_dout_43_re = addr_hit[93] & reg_re & !reg_error;

  assign keccak_dout_44_re = addr_hit[94] & reg_re & !reg_error;

  assign keccak_dout_45_re = addr_hit[95] & reg_re & !reg_error;

  assign keccak_dout_46_re = addr_hit[96] & reg_re & !reg_error;

  assign keccak_dout_47_re = addr_hit[97] & reg_re & !reg_error;

  assign keccak_dout_48_re = addr_hit[98] & reg_re & !reg_error;

  assign keccak_dout_49_re = addr_hit[99] & reg_re & !reg_error;

  assign trng_dout_re = addr_hit[100] & reg_re & !reg_error;

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[11]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[12]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[13]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[18]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[19]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[20]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[21]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[22]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[23]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[24]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[25]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[26]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[27]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[28]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[29]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[30]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[31]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[32]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[33]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[34]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[35]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[36]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[37]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[38]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[39]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[40]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[41]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[42]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[43]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[44]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[45]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[46]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[47]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[48]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[49]: begin
        reg_rdata_next[31:0] = '0;
      end

      addr_hit[50]: begin
        reg_rdata_next[31:0] = keccak_dout_0_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[31:0] = keccak_dout_1_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[31:0] = keccak_dout_2_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[31:0] = keccak_dout_3_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[31:0] = keccak_dout_4_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[31:0] = keccak_dout_5_qs;
      end

      addr_hit[56]: begin
        reg_rdata_next[31:0] = keccak_dout_6_qs;
      end

      addr_hit[57]: begin
        reg_rdata_next[31:0] = keccak_dout_7_qs;
      end

      addr_hit[58]: begin
        reg_rdata_next[31:0] = keccak_dout_8_qs;
      end

      addr_hit[59]: begin
        reg_rdata_next[31:0] = keccak_dout_9_qs;
      end

      addr_hit[60]: begin
        reg_rdata_next[31:0] = keccak_dout_10_qs;
      end

      addr_hit[61]: begin
        reg_rdata_next[31:0] = keccak_dout_11_qs;
      end

      addr_hit[62]: begin
        reg_rdata_next[31:0] = keccak_dout_12_qs;
      end

      addr_hit[63]: begin
        reg_rdata_next[31:0] = keccak_dout_13_qs;
      end

      addr_hit[64]: begin
        reg_rdata_next[31:0] = keccak_dout_14_qs;
      end

      addr_hit[65]: begin
        reg_rdata_next[31:0] = keccak_dout_15_qs;
      end

      addr_hit[66]: begin
        reg_rdata_next[31:0] = keccak_dout_16_qs;
      end

      addr_hit[67]: begin
        reg_rdata_next[31:0] = keccak_dout_17_qs;
      end

      addr_hit[68]: begin
        reg_rdata_next[31:0] = keccak_dout_18_qs;
      end

      addr_hit[69]: begin
        reg_rdata_next[31:0] = keccak_dout_19_qs;
      end

      addr_hit[70]: begin
        reg_rdata_next[31:0] = keccak_dout_20_qs;
      end

      addr_hit[71]: begin
        reg_rdata_next[31:0] = keccak_dout_21_qs;
      end

      addr_hit[72]: begin
        reg_rdata_next[31:0] = keccak_dout_22_qs;
      end

      addr_hit[73]: begin
        reg_rdata_next[31:0] = keccak_dout_23_qs;
      end

      addr_hit[74]: begin
        reg_rdata_next[31:0] = keccak_dout_24_qs;
      end

      addr_hit[75]: begin
        reg_rdata_next[31:0] = keccak_dout_25_qs;
      end

      addr_hit[76]: begin
        reg_rdata_next[31:0] = keccak_dout_26_qs;
      end

      addr_hit[77]: begin
        reg_rdata_next[31:0] = keccak_dout_27_qs;
      end

      addr_hit[78]: begin
        reg_rdata_next[31:0] = keccak_dout_28_qs;
      end

      addr_hit[79]: begin
        reg_rdata_next[31:0] = keccak_dout_29_qs;
      end

      addr_hit[80]: begin
        reg_rdata_next[31:0] = keccak_dout_30_qs;
      end

      addr_hit[81]: begin
        reg_rdata_next[31:0] = keccak_dout_31_qs;
      end

      addr_hit[82]: begin
        reg_rdata_next[31:0] = keccak_dout_32_qs;
      end

      addr_hit[83]: begin
        reg_rdata_next[31:0] = keccak_dout_33_qs;
      end

      addr_hit[84]: begin
        reg_rdata_next[31:0] = keccak_dout_34_qs;
      end

      addr_hit[85]: begin
        reg_rdata_next[31:0] = keccak_dout_35_qs;
      end

      addr_hit[86]: begin
        reg_rdata_next[31:0] = keccak_dout_36_qs;
      end

      addr_hit[87]: begin
        reg_rdata_next[31:0] = keccak_dout_37_qs;
      end

      addr_hit[88]: begin
        reg_rdata_next[31:0] = keccak_dout_38_qs;
      end

      addr_hit[89]: begin
        reg_rdata_next[31:0] = keccak_dout_39_qs;
      end

      addr_hit[90]: begin
        reg_rdata_next[31:0] = keccak_dout_40_qs;
      end

      addr_hit[91]: begin
        reg_rdata_next[31:0] = keccak_dout_41_qs;
      end

      addr_hit[92]: begin
        reg_rdata_next[31:0] = keccak_dout_42_qs;
      end

      addr_hit[93]: begin
        reg_rdata_next[31:0] = keccak_dout_43_qs;
      end

      addr_hit[94]: begin
        reg_rdata_next[31:0] = keccak_dout_44_qs;
      end

      addr_hit[95]: begin
        reg_rdata_next[31:0] = keccak_dout_45_qs;
      end

      addr_hit[96]: begin
        reg_rdata_next[31:0] = keccak_dout_46_qs;
      end

      addr_hit[97]: begin
        reg_rdata_next[31:0] = keccak_dout_47_qs;
      end

      addr_hit[98]: begin
        reg_rdata_next[31:0] = keccak_dout_48_qs;
      end

      addr_hit[99]: begin
        reg_rdata_next[31:0] = keccak_dout_49_qs;
      end

      addr_hit[100]: begin
        reg_rdata_next[31:0] = trng_dout_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module trng_keccak_data_reg_top_intf
#(
  parameter int AW = 9,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output trng_keccak_data_reg_pkg::trng_keccak_data_reg2hw_t reg2hw, // Write
  input  trng_keccak_data_reg_pkg::trng_keccak_data_hw2reg_t hw2reg, // Read
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  trng_keccak_data_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .hw2reg, // Read
    .devmode_i
  );
  
endmodule


